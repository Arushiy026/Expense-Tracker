#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define MAX_LIMIT 100
typedef struct {
    char description[100];
    float amount;
    char category[50];
    char date[12];
}Expense;
Expense expenses[MAX_LIMIT];
int expense_count = 0;
void create_rec(void);
void saveExpenses(void);
void add_rec(void);
void update_rec(void);
void delete_rec(void);
void view_all(void);
void view_category(void);
void view_total(void);
char Login_ID[100];
char Password[100];
int main() {
    char Login_ID[100];
    char Password[100];
    printf("Enter the login id : ");
    scanf("%s",Login_ID);
    getchar();
    printf("Enter the password : ");
    scanf("%s",Password);
    if(strcmp(Login_ID,"admin")==0 && strcmp(Password,"admin@123")==0){
        printf("Login successful !");
    }
    else{
        printf("Login unsuccessful !");
        return 0;
    }
    int ch;
    while(1) {
        printf("\n============= WELCOME TO THE EXPENSE TRACKER ================\n");
        printf("\nPress 1 to CREATE expense records ");
        printf("\nPress 2 to ADD records to already existing data ");
        printf("\nPress 3 to UPDATE a particular expense record ");
        printf("\nPress 4 to DELETE a particular expense record ");
        printf("\nPress 5 to VIEW all the records ");
        printf("\nPress 6 to VIEW the records by CATEGORY ");
        printf("\nPress 7 to VIEW the TOTAL of all records ");
        printf("\nPress 8 to exit ");
        printf("\n\n============================================================\n");
        printf("\nEnter your choice out of 1/2/3/4/5/6/7/8 : ");
        scanf("%d", &ch);
        
        if(ch == 1) {
            create_rec();
        }
        else if(ch == 2) {
            add_rec();
        }
        else if(ch == 3) {
            update_rec();
        }
        else if(ch == 4) {
            delete_rec();
        }
        else if(ch == 5) {
            view_all();
        }
        else if(ch == 6) {
            view_category();
        }
        else if(ch == 7) {
            view_total();
        }
        else if(ch == 8) {
            return 0;
        }
        else {
            printf("\nINVALID CHOICE ENTERED\n");
        }
    }
}

void create_rec(void) {
    printf("\nEnter the number of records you want to add in the file : ");
    scanf("%d", &expense_count);
    
    if(expense_count > MAX_LIMIT) {
        printf("\nNumber of records have exceeded the limit ");
        return;
    }
    FILE *fptr = fopen("expense.txt", "w");
    if(fptr != NULL) {
        printf("\nEnter the records for creating a fresh file....... ");
        for(int i = 0; i < expense_count; i++) {
            printf("\n\nEnter record %d : ", i + 1);
            printf("\nEnter the description of expense : ");
            scanf("%s", expenses[i].description);
            printf("\nEnter the amount of expense : ");
            scanf("%f", &expenses[i].amount);
            printf("\nEnter the category of expense : ");
            scanf("%s", expenses[i].category);
            printf("\nEnter the date of expense DD/MM/YYYY: ");
            scanf("%s", expenses[i].date);
            fprintf(fptr, "Record Number : %d\nDescription : %s\nAmount : %.2f\nCategory : %s\nDate : %s\n\n", 
                    i + 1, expenses[i].description, expenses[i].amount, expenses[i].category, expenses[i].date);
        }
    }
    else {
        printf("\nERROR: Could not open file for writing\n");
    }
    fclose(fptr);
}
void add_rec(void) {
    int num_new;
    printf("\nEnter how many records you want to append at the end : ");
    scanf("%d", &num_new);
    FILE *fptr = fopen("expense.txt", "a");
    if(fptr != NULL) {
        for(int i = expense_count; i < expense_count + num_new; i++) {
            printf("\n\nEnter record %d : ", i + 1);
            printf("\nEnter the description of expense : ");
            scanf("%s", expenses[i].description);
            printf("\nEnter amount of expense : ");
            scanf("%f", &expenses[i].amount);
            printf("\nEnter category of expense : ");
            scanf("%s", expenses[i].category);
            printf("\nEnter date of expense DD/MM/YYYY : ");
            scanf("%s", expenses[i].date);
            fprintf(fptr, "Record Number : %d\nDescription : %s\nAmount : %.2f\nCategory : %s\nDate : %s\n\n", 
                    i + 1, expenses[i].description, expenses[i].amount, expenses[i].category, expenses[i].date);
        }
        expense_count += num_new;
    }
    else {
        printf("\nERROR: Could not open file for appending\n");
    }
    fclose(fptr);
}
void update_rec(void) {
    int idx;
    printf("\nEnter the record number to update : ");
    scanf("%d",&idx);
    idx = idx - 1;
    if(idx >= expense_count || idx < 0) {
        printf("\nRecord number %d does not exist\n", idx + 1);
        return;
    } 
    else {
        printf("\nEnter the new description : ");
        scanf("%s", expenses[idx].description);
        printf("\nEnter the new amount : ");
        scanf("%f", &expenses[idx].amount);
        printf("\nEnter the new category : ");
        scanf("%s", expenses[idx].category);
        printf("\nEnter the new date DD/MM/YYYY : ");
        scanf("%s", expenses[idx].date);
        saveExpenses();
        printf("\nRecord updated successfully !!\n");
    }
}
void saveExpenses(void) {
    FILE *fptr = fopen("expense.txt", "w");
    if(fptr == NULL) {
        printf("Error saving expenses to file.\n");
        return;
    }
    for(int i = 0; i < expense_count; i++) {
        fprintf(fptr, "Record Number : %d\nDescription : %s\nAmount : %.2f\nCategory : %s\nDate : %s\n\n", 
                i + 1, expenses[i].description, expenses[i].amount, expenses[i].category, expenses[i].date);
    }
    fclose(fptr);
}
void delete_rec(){
    int idx;
    printf("\nEnter the record number to delete : ");
    scanf("%d",&idx);
    idx = idx-1;
    if(idx >= expense_count || idx < 0) {
        printf("\nRecord number %d does not exist\n", idx + 1);
        return;
    } 
    else {
        for(int i=idx;i<expense_count-1;i++){
            expenses[i]=expenses[i+1];
        }
        expense_count--;
        saveExpenses();
        printf("\nRecord deleted successfully !!\n");
    }
}
void view_all(void){
    FILE *fptr=fopen("expense.txt","r");
    if(fptr==NULL){
        printf("Error! File could not be opened");
        exit(1);
    }
    while(!feof(fptr)){
        int rec_num;
        float amt;
        char date1[12];
        char cat[50];
        char des[100];
        fscanf(fptr, "Record Number : %d\nDescription : %s\nAmount : %f\nCategory : %s\nDate : %s\n\n", 
                &rec_num, des, &amt, cat, date1);
        printf("\nRecord Number : %d\n",rec_num);
        printf("Description : %s\n",des);
        printf("Amount : %f\n",amt);
        printf("Category : %s\n",cat);
        printf("Date : %s\n\n",date1);
    }
    fclose(fptr);
}
void view_category(void) {
    char category[50];
    printf("\nEnter the category to view its all records: ");
    scanf("%s",category);  
    for (int i = 0; category[i]; i++) {
        if (category[i] >= 'a' && category[i] <= 'z') {
            category[i] = category[i]-32;  
        }
    }
    int found = 0;
    for (int i = 0; i < expense_count; i++) {
        char record_category[50];
        strcpy(record_category, expenses[i].category);
        for (int j = 0; record_category[j]; j++) {
            if (record_category[j] >= 'a' && record_category[j] <= 'z') {
                record_category[j] -= 32; 
            }
        }
        if (strcmp(record_category, category) == 0) {
            found = 1;
            printf("\nRecord Number: %d\n", i + 1);
            printf("Description: %s\n", expenses[i].description);
            printf("Amount: %.2f\n", expenses[i].amount);
            printf("Category: %s\n", expenses[i].category);
            printf("Date: %s\n\n", expenses[i].date);
        }
    }
    if (!found) {
        printf("\nNo records found for the category '%s'.\n", category);
    }
}
void view_total(void){
    float total=0.0;
    for(int i=0;i<expense_count;i++){
        total=total+expenses[i].amount;
    }
    printf("\nTotal of all %d expense records = %f\n",expense_count,total);
}
